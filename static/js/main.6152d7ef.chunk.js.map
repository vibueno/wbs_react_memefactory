{"version":3,"sources":["components/GenerateMemeForm/index.js","App.js","index.js"],"names":["GenerateMemeForm","submitHandler","clickHandlerRandomPic","textTop","useRef","textBottom","className","onSubmit","e","current","value","htmlFor","type","id","maxLength","ref","onClick","App","useState","memePics","setMemePics","memePicURL","setMemePicURL","setTextTop","setTextBottom","errorHandler","response","ok","Error","statusText","getRandomPicURL","Math","round","random","length","url","useEffect","fetch","then","json","data","memes","preventDefault","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA0DeA,G,MAtDU,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,cAAeC,EAA4B,EAA5BA,sBACnCC,EAAUC,mBACVC,EAAaD,mBAEnB,OACE,uBACEE,UAAU,YACVC,SAAU,SAACC,GACTP,EAAcO,EAAGL,EAAQM,QAAQC,MAAOL,IAH5C,UAME,uBAAOM,QAAQ,iBAAiBL,UAAU,wBAA1C,sBAIA,uBACEM,KAAK,OACLC,GAAG,iBACHP,UAAU,kBACVQ,UAAU,KACVC,IAAKZ,IAGP,uBAAOQ,QAAQ,oBAAoBL,UAAU,wBAA7C,yBAGA,uBACEM,KAAK,OACLC,GAAG,oBACHP,UAAU,kBACVQ,UAAU,KACVC,IAAKV,IAGP,wBAAQO,KAAK,SAASN,UAAU,gBAAhC,wBAGA,yBACEM,KAAK,SACLN,UAAU,gBACVU,QAAS,WACPd,KAJJ,UAOG,IAPH,gBAWA,wBAAQU,KAAK,SAASN,UAAU,gBAAhC,2B,MCYSW,MA3Df,WAAgB,IAAD,EACmBC,qBADnB,mBACNC,EADM,KACIC,EADJ,OAEuBF,qBAFvB,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,YAH1B,mBAGNf,EAHM,KAGGoB,EAHH,OAIuBL,mBAAS,eAJhC,mBAINb,EAJM,KAIMmB,EAJN,KAMPC,EAAe,SAACC,GACpB,GAAKA,EAASC,GACT,OAAOD,EADM,MAAME,MAAMF,EAASG,aAUnCC,EAAkB,SAACX,GAGvB,OAFYA,EAASY,KAAKC,MAAMD,KAAKE,SAAWd,EAASe,OAAS,IAAIC,KAexE,OAVAC,qBAAU,WACRC,MAAM,qCACHC,KAAKb,GACLa,MAAK,SAACZ,GAAD,OAAcA,EAASa,UAC5BD,MAAK,SAACZ,GACLN,EAAYM,EAASc,KAAKC,OAC1BnB,EAAcQ,EAAgBJ,EAASc,KAAKC,aAE/C,IAGD,qCACE,+CACCtB,EACC,cAAC,EAAD,CACElB,cA3Bc,SAACO,EAAGL,EAASE,GACjCG,EAAEkC,iBACFnB,EAAWpB,GACXqB,EAAcnB,IAyBRH,sBAAuB,WACrBoB,EAAcQ,EAAgBX,OAGhC,KACJ,+BACGE,EACC,sBAAKf,UAAU,yBAAf,UACE,qBAAKA,UAAU,gBAAf,SAAgCH,IAChC,qBAAKwC,IAAKtB,EAAYf,UAAU,eAAesC,IAAI,cACnD,qBAAKtC,UAAU,mBAAf,SAAmCD,OAGrC,qBAAKC,UAAU,uBAAf,sCCpDVuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6152d7ef.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nimport \"./index.css\";\n\nconst GenerateMemeForm = ({ submitHandler, clickHandlerRandomPic }) => {\n  const textTop = useRef();\n  const textBottom = useRef();\n\n  return (\n    <form\n      className=\"meme-form\"\n      onSubmit={(e) => {\n        submitHandler(e, textTop.current.value, textBottom);\n      }}\n    >\n      <label htmlFor=\"top-text-input\" className=\"meme-form-field-label\">\n        Text top\n      </label>\n\n      <input\n        type=\"text\"\n        id=\"top-text-input\"\n        className=\"meme-form-field\"\n        maxLength=\"40\"\n        ref={textTop}\n      />\n\n      <label htmlFor=\"bottom-text-input\" className=\"meme-form-field-label\">\n        Text bottom\n      </label>\n      <input\n        type=\"text\"\n        id=\"bottom-text-input\"\n        className=\"meme-form-field\"\n        maxLength=\"40\"\n        ref={textBottom}\n      />\n\n      <button type=\"button\" className=\"meme-form-btn\">\n        Browse pic\n      </button>\n      <button\n        type=\"button\"\n        className=\"meme-form-btn\"\n        onClick={() => {\n          clickHandlerRandomPic();\n        }}\n      >\n        {\" \"}\n        Random pic\n      </button>\n\n      <button type=\"submit\" className=\"meme-form-btn\">\n        Generate\n      </button>\n    </form>\n  );\n};\nexport default GenerateMemeForm;\n","import React, { useEffect, useState } from \"react\";\nimport GenerateMemeForm from \"./components/GenerateMemeForm\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [memePics, setMemePics] = useState();\n  const [memePicURL, setMemePicURL] = useState();\n  const [textTop, setTextTop] = useState(\"Text top\");\n  const [textBottom, setTextBottom] = useState(\"Text bottom\");\n\n  const errorHandler = (response) => {\n    if (!response.ok) throw Error(response.statusText);\n    else return response;\n  };\n\n  const submitHandler = (e, textTop, textBottom) => {\n    e.preventDefault();\n    setTextTop(textTop);\n    setTextBottom(textBottom);\n  };\n\n  const getRandomPicURL = (memePics) => {\n    const url = memePics[Math.round(Math.random() * memePics.length - 1)].url;\n\n    return url;\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(errorHandler)\n      .then((response) => response.json())\n      .then((response) => {\n        setMemePics(response.data.memes);\n        setMemePicURL(getRandomPicURL(response.data.memes));\n      });\n  }, []);\n\n  return (\n    <>\n      <h1>The Meme Mine</h1>\n      {memePics ? (\n        <GenerateMemeForm\n          submitHandler={submitHandler}\n          clickHandlerRandomPic={() => {\n            setMemePicURL(getRandomPicURL(memePics));\n          }}\n        />\n      ) : null}\n      <main>\n        {memePicURL ? (\n          <div className=\"meme-picture-container\">\n            <div className=\"meme-text top\">{textTop}</div>\n            <img src={memePicURL} className=\"meme-picture\" alt=\"Meme base\" />\n            <div className=\"meme-text bottom\">{textBottom}</div>\n          </div>\n        ) : (\n          <div className=\"meme-picture-loading\">Loading picture...</div>\n        )}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}