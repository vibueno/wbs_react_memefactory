{"version":3,"sources":["components/GenerateMemeForm/index.js","App.js","index.js"],"names":["GenerateMemeForm","React","forwardRef","formRef","submitHandler","clickHandlerRandomPic","clickHandlerReset","textTop","useRef","textBottom","className","ref","onSubmit","e","current","value","htmlFor","type","id","maxLength","onClick","App","useState","memePics","setMemePics","memePicURL","setMemePicURL","setTextTop","setTextBottom","createRef","errorHandler","response","ok","Error","statusText","getRandomPicURL","Math","round","random","length","url","useEffect","fetch","then","json","data","memes","text1","text2","preventDefault","reset","src","alt","renderPicture","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAqEeA,G,MAjEUC,IAAMC,YAC7B,WAA8DC,GAAa,IAAxEC,EAAuE,EAAvEA,cAAeC,EAAwD,EAAxDA,sBAAuBC,EAAiC,EAAjCA,kBACjCC,EAAUC,mBACVC,EAAaD,mBAEnB,OACE,uBACEE,UAAU,YACVC,IAAKR,EACLS,SAAU,SAACC,GACTT,EAAcS,EAAGN,EAAQO,QAAQC,MAAON,EAAWK,QAAQC,QAJ/D,UAOE,uBAAOC,QAAQ,iBAAiBN,UAAU,wBAA1C,sBAIA,uBACEO,KAAK,OACLC,GAAG,iBACHR,UAAU,kBACVS,UAAU,KACVR,IAAKJ,IAGP,uBAAOS,QAAQ,oBAAoBN,UAAU,wBAA7C,yBAGA,uBACEO,KAAK,OACLC,GAAG,oBACHR,UAAU,kBACVS,UAAU,KACVR,IAAKF,IAGP,wBAAQQ,KAAK,SAASP,UAAU,gBAAhC,wBAGA,wBACEO,KAAK,SACLP,UAAU,gBACVU,QAAS,WACPf,KAJJ,wBAUA,wBAAQY,KAAK,SAASP,UAAU,gBAAhC,sBAGA,wBACEO,KAAK,SACLP,UAAU,gBACVU,QAAS,WACPd,KAJJ,0B,MC6BOe,MAhFf,WAAgB,IAAD,EACmBC,qBADnB,mBACNC,EADM,KACIC,EADJ,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,YAH1B,mBAGNf,EAHM,KAGGoB,EAHH,OAIuBL,mBAAS,eAJhC,mBAINb,EAJM,KAIMmB,EAJN,KAMPzB,EAAUF,IAAM4B,YAEhBC,EAAe,SAACC,GACpB,GAAKA,EAASC,GACT,OAAOD,EADM,MAAME,MAAMF,EAASG,aAUnCC,EAAkB,SAACZ,GAAD,OACtBA,EAASa,KAAKC,MAAMD,KAAKE,SAAWf,EAASgB,OAAS,IAAIC,KA0C5D,OAVAC,qBAAU,WACRC,MAAM,qCACHC,KAAKb,GACLa,MAAK,SAACZ,GAAD,OAAcA,EAASa,UAC5BD,MAAK,SAACZ,GACLP,EAAYO,EAASc,KAAKC,OAC1BpB,EAAcS,EAAgBJ,EAASc,KAAKC,aAE/C,IAGD,qCACE,+CACCvB,EACC,cAAC,EAAD,CACEZ,IAAKR,EACLC,cAvDc,SAACS,EAAGkC,EAAOC,GAC/BnC,EAAEoC,iBACFtB,EAAWoB,GACXnB,EAAcoB,IAqDR3C,sBAAuB,WACrBqB,EAAcS,EAAgBZ,KAEhCjB,kBAlDa,WACnBH,EAAQW,QAAQoC,QAChBvB,EAAW,IACXC,EAAc,IACdF,EAAc,YAgDR,KACJ,+BA9CkB,WACpB,OAAQD,GACN,IAAK,GACH,OAAO,qBAAKf,UAAU,uBAAf,gCAET,IAAK,QACH,OACE,qBAAKA,UAAU,yBAAf,uDAKJ,QACE,OACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,gBAAf,SAAgCH,IAChC,qBAAK4C,IAAK1B,EAAYf,UAAU,eAAe0C,IAAI,KACnD,qBAAK1C,UAAU,mBAAf,SAAmCD,QA6BlC4C,SC3EbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eef3f439.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\nimport \"./index.css\";\n\nconst GenerateMemeForm = React.forwardRef(\n  ({ submitHandler, clickHandlerRandomPic, clickHandlerReset }, formRef) => {\n    const textTop = useRef();\n    const textBottom = useRef();\n\n    return (\n      <form\n        className=\"meme-form\"\n        ref={formRef}\n        onSubmit={(e) => {\n          submitHandler(e, textTop.current.value, textBottom.current.value);\n        }}\n      >\n        <label htmlFor=\"top-text-input\" className=\"meme-form-field-label\">\n          Text top\n        </label>\n\n        <input\n          type=\"text\"\n          id=\"top-text-input\"\n          className=\"meme-form-field\"\n          maxLength=\"40\"\n          ref={textTop}\n        />\n\n        <label htmlFor=\"bottom-text-input\" className=\"meme-form-field-label\">\n          Text bottom\n        </label>\n        <input\n          type=\"text\"\n          id=\"bottom-text-input\"\n          className=\"meme-form-field\"\n          maxLength=\"40\"\n          ref={textBottom}\n        />\n\n        <button type=\"button\" className=\"meme-form-btn\">\n          Browse pic\n        </button>\n        <button\n          type=\"button\"\n          className=\"meme-form-btn\"\n          onClick={() => {\n            clickHandlerRandomPic();\n          }}\n        >\n          Random pic\n        </button>\n\n        <button type=\"submit\" className=\"meme-form-btn\">\n          Generate\n        </button>\n        <button\n          type=\"button\"\n          className=\"meme-form-btn\"\n          onClick={() => {\n            clickHandlerReset();\n          }}\n        >\n          Reset\n        </button>\n      </form>\n    );\n  }\n);\nexport default GenerateMemeForm;\n","import React, { useEffect, useState } from \"react\";\nimport GenerateMemeForm from \"./components/GenerateMemeForm\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [memePics, setMemePics] = useState();\n  const [memePicURL, setMemePicURL] = useState(\"\");\n  const [textTop, setTextTop] = useState(\"Text top\");\n  const [textBottom, setTextBottom] = useState(\"Text bottom\");\n\n  const formRef = React.createRef();\n\n  const errorHandler = (response) => {\n    if (!response.ok) throw Error(response.statusText);\n    else return response;\n  };\n\n  const submitHandler = (e, text1, text2) => {\n    e.preventDefault();\n    setTextTop(text1);\n    setTextBottom(text2);\n  };\n\n  const getRandomPicURL = (memePics) =>\n    memePics[Math.round(Math.random() * memePics.length - 1)].url;\n\n  const resetHandler = () => {\n    formRef.current.reset();\n    setTextTop(\"\");\n    setTextBottom(\"\");\n    setMemePicURL(\"noPic\");\n  };\n\n  const renderPicture = () => {\n    switch (memePicURL) {\n      case \"\":\n        return <div className=\"meme-picture-loading\">Loading picture...</div>;\n\n      case \"noPic\":\n        return (\n          <div className=\"meme-picture-container\">\n            Get a random picture to start a new meme!\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"meme-picture-container\">\n            <div className=\"meme-text top\">{textTop}</div>\n            <img src={memePicURL} className=\"meme-picture\" alt=\"\" />\n            <div className=\"meme-text bottom\">{textBottom}</div>\n          </div>\n        );\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(errorHandler)\n      .then((response) => response.json())\n      .then((response) => {\n        setMemePics(response.data.memes);\n        setMemePicURL(getRandomPicURL(response.data.memes));\n      });\n  }, []);\n\n  return (\n    <>\n      <h1>The Meme Mine</h1>\n      {memePics ? (\n        <GenerateMemeForm\n          ref={formRef}\n          submitHandler={submitHandler}\n          clickHandlerRandomPic={() => {\n            setMemePicURL(getRandomPicURL(memePics));\n          }}\n          clickHandlerReset={resetHandler}\n        />\n      ) : null}\n      <main>{renderPicture()}</main>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}